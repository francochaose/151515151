{"pages":[{"title":"视频","text":"区块链和比特币原理 《区块链技术与应用》公开课 区块链与各行业 区块链到底是什么 六分钟讲明白区块链","link":"/video/index.html"},{"title":"小工具","text":"blockchain-workbenchblockchain-workbench是github上的一个开源项目，可以获得样例和源码。官网：https://github.com/Azure-Samples/blockchain （国外，需魔法上网） hyperledger这是一个关于区块链hyperledger的开源项目，在上面可以找到相关课程官网：https://github.com/itheima1/BlockChain （国外，需魔法上网） MetaMaskMetaMask是一个浏览器扩展，可以让你用普通的浏览器访问以太坊区块链。官网：https://metamask.io/ （国外，需魔法上网） MistMist浏览器是以太坊官方浏览器，内置访问以太坊区块链的能力。官网：https://github.com/ethereum/mist （国外，需魔法上网） RemixRemix是以太坊官方开发的Solidity在线集成开发环境，你可以直接在浏览器中编写Solidity代码、编译、 调试以及部署合约。官网：http://remix.hubwiz.com/","link":"/littleapp/index.html"},{"title":"友情链接","text":"各大高校智能财务专业人工智能与智能财务以为辽宁网友的区块链智能财务软件区块链博客区块链与云计算","link":"/friends/index.html"}],"posts":[{"title":"PBTF算法","text":"材料整理自CSDNPBFT是Practical Byzantine Fault Tolerance的缩写，即：实用拜占庭容错算法。该算法是Miguel Castro（卡斯特罗）和Barbara Liskov（利斯科夫）在1999年提出来的，解决了原始拜占庭容错算法效率不高的问题，算法的时间复杂度是O(n^2)，使得在实际系统应用中可以解决拜占庭容错问题。该论文发表在1999年的操作系统设计与实现国际会议上（OSDI99）。其中Barbara Liskov就是提出了著名的里氏替换原则（LSP）的人，2008年图灵奖得主。以下拜占庭容错问题简称BFT。BFT是区块链共识算法中，需要解决的一个核心问题，以比特币和以太访为代表的POW，EOS为代表的DPOS，以及今后以太访逐渐替换的共识算法POS，这些都是公链算法，解决的是共识节点众多情况下的BFT。而PBFT是在联盟链共识节点较少的情况下BFT的一种解决方案。 PBFT算法流程：PBFT算法前提，采用密码学算法保证节点之间的消息传送是不可篡改的。 PBFT容忍无效或者恶意节点数：f，为了保障整个系统可以正常运转，需要有2f+1个正常节点，系统的总节点数为：|R| = 3f + 1。也就是说，PBFT算法可以容忍小于1/3个无效或者恶意节点，该部分的原理证明请参考PBFT论文，下文有链接地址。PBFT是一种状态机副本复制算法，所有的副本在一个视图（view）轮换的过程中操作，主节点通过视图编号以及节点数集合来确定，即：主节点 p = v mod |R|。v：视图编号，|R|节点个数，p：主节点编号。PBFT算法主体实现流程图如下：![PBTF.png])以下详细说明，每个主体流程内容： 1.REQUEST：客户端c向主节点p发送请求。o: 请求的具体操作，t: 请求时客户端追加的时间戳，c：客户端标识。REQUEST: 包含消息内容m，以及消息摘要d(m)。客户端对请求进行签名。 2.PRE-PREPARE：主节点收到客户端的请求，需要进行以下交验：a.客户端请求消息签名是否正确。非法请求丢弃。正确请求，分配一个编号n，编号n主要用于对客户端的请求进行排序。然后广播一条&lt;, m&gt;消息给其他副本节点。v：视图编号，d客户端消息摘要，m消息内容。 进行主节点签名。n是要在某一个范围区间内的[h, H]。 3. PREPARE：副本节点i收到主节点的PRE-PREPARE消息，需要进行以下交验：a.主节点PRE-PREPARE消息签名是否正确。b.当前副本节点是否已经收到了一条在同一v下并且编号也是n，但是签名不同的PRE-PREPARE信息。c.d与m的摘要是否一致。d.n是否在区间[h, H]内。非法请求丢弃。正确请求，副本节点i向其他节点包括主节点发送一条消息, v, n, d, m与上述PRE-PREPARE消息内容相同，i是当前副本节点编号。进行副本节点i的签名。记录PRE-PREPARE和PREPARE消息到log中，用于View Change过程中恢复未完成的请求操作。 4.COMMIT：主节点和副本节点收到PREPARE消息，需要进行以下交验：a.副本节点PREPARE消息签名是否正确。b. 当前副本节点是否已经收到了同一视图v下的n。c. n是否在区间[h, H]内。d.是否和当前已收到PRE-PPREPARE中的d相同非法请求丢弃。如果副本节点i收到了2f+1个验证通过的PREPARE消息，则向其他节点包括主节点发送一条消息，v, n, d, i与上述PREPARE消息内容相同。进行副本节点i的签名。记录COMMIT消息到日志中，用于View Change过程中恢复未完成的请求操作。记录其他副本节点发送的PREPARE消息到log中。 5. REPLY：主节点和副本节点收到COMMIT消息，需要进行以下交验：a. 副本节点COMMIT消息签名是否正确。b. 当前副本节点是否已经收到了同一视图v下的n。c. d与m的摘要是否一致。d. n是否在区间[h, H]内。非法请求丢弃。如果副本节点i收到了2f+1个验证通过的COMMIT消息，说明当前网络中的大部分节点已经达成共识，运行客户端的请求操作o，并返回 给客户端，r：是请求操作结果，客户端如果收到f+1个相同的REPLY消息，说明客户端发起的请求已经达成全网共识，否则客户端需要判断是否重新发送请求给主节点。记录其他副本节点发送的COMMIT消息到log中。 垃圾回收：在上述算法流程中，为了确保在View Change的过程中，能够恢复先前的请求，每一个副本节点都记录一些消息到本地的log中，当执行请求后副本节点需要把之前该请求的记录消息清除掉。最简单的做法是在Reply消息后，再执行一次当前状态的共识同步，这样做的成本比较高，因此可以在执行完多条请求K（例如：100条）后执行一次状态同步。这个状态同步消息就是CheckPoint消息。副本节点i发送 给其他节点，n是当前节点所保留的最后一个视图请求编号，d是对当前状态的一个摘要，该CheckPoint消息记录到log中。如果副本节点i收到了2f+1个验证过的CheckPoint消息，则清除先前日志中的消息，并以n作为当前一个stable checkpoint。这是理想情况，实际上当副本节点i向其他节点发出CheckPoint消息后，其他节点还没有完成K条请求，所以不会立即对i的请求作出响应，它还会按照自己的节奏，向前行进，但此时发出的CheckPoint并未形成stable，为了防止i的处理请求过快，设置一个上文提到的高低水位区间[h, H]来解决这个问题。低水位h等于上一个stable checkpoint的编号，高水位H = h + L，其中L是我们指定的数值，等于checkpoint周期处理请求数K的整数倍，可以设置为L = 2K。当副本节点i处理请求超过高水位H时，此时就会停止脚步，等待stable checkpoint发生变化，再继续前进。 View Change：如果主节点作恶，它可能会给不同的请求编上相同的序号，或者不去分配序号，或者让相邻的序号不连续。备份节点应当有职责来主动检查这些序号的合法性。如果主节点掉线或者作恶不广播客户端的请求，客户端设置超时机制，超时的话，向所有副本节点广播请求消息。副本节点检测出主节点作恶或者下线，发起View Change协议。副本节点向其他节点广播消息。n是最新的stable checkpoint的编号，C是2f+1验证过的CheckPoint消息集合，P是当前副本节点未完成的请求的PRE-PREPARE和PREPARE消息集合。当主节点p = v + 1 mod |R|收到2f个有效的VIEW-CHANGE消息后，向其他节点广播 消息。V是有效的VIEW-CHANGE消息集合。O是主节点重新发起的未经完成的PRE-PREPARE消息集合。PRE-PREPARE消息集合的选取规则： 选取V中最小的stable checkpoint编号min-s，选取V中prepare消息的最大编号max-s。 在min-s和max-s之间，如果存在P消息集合，则创建&lt;, m&gt;消息。否则创建一个空的PRE-PREPARE消息，即：&lt;, m(null)&gt;, m(null)空消息，d(null)空消息摘要。副本节点收到主节点的NEW-VIEW消息，验证有效性，有效的话，进入v+1状态，并且开始O中的PRE-PREPARE消息处理流程。","link":"/2021/06/16/a-PBTF/"},{"title":"BTF(拜占庭容错技术)","text":"材料整理自CSDN拜占庭弄错技术是一类分布式计算领域的容错技术。拜占庭假设是由于硬件错误、网络拥塞或中断以及遭到恶意攻击的原因，计算机和网络出现不可预测的行为。拜占庭容错用来处理这种异常行为，并满足所要解决问题的规范。拜占庭容错系统是一个拥有n台节点的系统，整个系统对于每一个请求，满足以下条件： 1）所有非拜占庭节点使用相同的输入信息，产生同样的结果；2）如果输入的信息正确，那么所有非拜占庭节点必须接收这个信息，并计算相应的结果。拜占庭系统普遍采用的假设条件包括：1）拜占庭节点的行为可以是任意的，拜占庭节点之间可以共谋；2）节点之间的错误是不相关的；3）节点之间通过异步网络连接，网络中的消息可能丢失、乱序并延时到达，但大部分协议假设消息在有限的时间里能传达到目的地；4）服务器之间传递的信息，第三方可以嗅探到，但是不能篡改、伪造信息的内容和验证信息的完整性。拜占庭容错由于其理论上的可行性而缺乏实用性，另外还需要额外的时钟同步机制支持，算法的复杂度也是随节点的增加而指数级增加。","link":"/2021/06/16/a-BTF/"},{"title":"非对称加密技术","text":"银行系统我们先来回顾下现实的银行系统：首先我们需要把我们的个人信息（如身份证）给银行，银行给我们开立相对应的账户，银行在开户的时候确立了对账户的所有权。进行支付的时候，银行对交易双方完成转账（银行在开户的时候已经知道我们对应的账户） 匿名账本那么比特币如何在没有第三方银行的参与下，在确保隐私的同时如何确定账户所有权的呢？实际上比特币的账户是用地址来表示，账本上不显示个人信息，转账是把比特币从一个地址转移到另一个地址。转账记录如下： 12345{&quot;付款地址&quot;：&quot;2A39CBa2390FDe&quot;&quot;收款地址&quot;：&quot;AAC9CBa239aFcc&quot;&quot;金额&quot;：&quot;0.2btc&quot;} 地址与私钥比特币的解决方案是，谁拥有某个地址的私钥(如果完全没有加密概念的人，可以简单的把私钥当作密码)，谁就能用这个地址进行支付。（所以私钥一定保管好，如果私钥泄漏，比特币就可能丢失）比特币地址和私钥是一个非对称的关系，私钥经过一系列运算（其中有两次Hash）之后，可以得到地址, 但是无法从地址反推得到私钥。你所拥有的代币实际上是放在私钥中的，尽管你的钱包不能用了，但是只有你拥有你的私钥，你也可以在别的地方继续管理你的财产 对交易信息进行签名实际在签名之前，会先对交易信息进行Hash运算得到摘要信息，然后对摘要信息进行签名。过程大概是这样： 123456789101.对交易进行hash， 得到一个摘要信息（Hash值）hash('{&quot;付款地址&quot;：&quot;2A39CBa2390FDe&quot;,&quot;收款地址&quot;：&quot;AAC9CBa239aFcc&quot;,&quot;金额&quot;：&quot;0.2btc&quot;}') -&gt; 8aDB23CDEA62.用私钥对交易摘要进行签名（付款方在安全的环境下进行，以避免私钥泄密）, 用代码表示大概是这样。参数1为交易摘要参数2为私钥返回签名信息sign(&quot;8aDB23CDEA6&quot;, &quot;J78sknJhidhLIqdngalket&quot;) -&gt; &quot;3cdferdadgadg&quot; 广播在签名运算之后，付款节点就开始在全网进行广播：我支付了0.2btc到AAC9CBa239aFcc,签名信息是3cdferdadgadg，你们来确认一下吧。广播过程实际上是发信息到相连的其它节点，其它节点在验证通过后再转发到与之相连的节点，这样的扩散过程。广播的信息包含了交易原始信息和签名信息 验证其它节点在收到广播信息之后，会验证签名信息是不是付款方用私钥对交易原始信息签名产生的，如果验证通过说明确实是付款方本人发出的交易，说明交易有效，才会记录到账本中去。（实际还会验证付款账号有没有足够的余额，我们暂时忽略这点）验证过程实际是签名过程的逆运算，用代码表示大概过程是这样的： 123456789101112参数2为付款方地址返回交易摘要verify(&quot;3cdferdadgadg&quot;, &quot;2A39CBa2390FDe&quot;) -&gt; &quot;8aDB23CDEA6&quot;如果验证输出的信息和原始交易信息的hash一致，则验证通过，记录账本，用代码表示大概是这样：if(verify(&quot;3cdferdadgadg&quot;, &quot;2A39CBa2390FDe&quot;)== hash('{&quot;付款地址&quot;：&quot;2A39CBa2390FDe&quot;,&quot;收款地址&quot;：&quot;AAC9CBa239aFcc&quot;,&quot;金额&quot;：&quot;0.2btc&quot;}')) :写入账本广播else:donothing","link":"/2021/06/16/a-fdc/"},{"title":"区块链技术可能如何应用","text":"材料来自知乎如果互联网技术解决的是通讯问题的话，区块链技术解决的是信任问题。比如我和A赌NBA总冠军，我说是勇士，A说是骑士。但是A的赌品我深表怀疑，担心他输了赖账不给钱。没想到A反咬一口，还怀疑我的赌品不好，简直岂有此理！那咱俩就需要一个可信第三方来做公证人。我们可以各自出20块钱给我们都信得过的公证人来保管。如果届时勇士赢了，40块钱就归我。如果骑士赢了，40块钱就归A。 总决赛系列终于结束了，公证人卷了巨款40元跑了……人和人最基本的信任到哪里去了？ 出于对人性堕落的失望，我和A决定使用区块链技术来解决这个价值40块钱真金白银的问题。办法是写一个”智能合约“来实现对赌。方法是这样的，我们先各自出20块钱打到一个”智能合约“的账户里，这个合约不被任何人控制，只被合约的代码控制。现在”智能合约“的账户上有了40块钱，我们开始运行智能合约。 合约代码大概这样：比赛结果=NBA官方网站API.get(“总决赛”)if(骑士赢)pay 40 to Aelsepay 40 to B这个账户唯一会动账的可能就是获取比赛结果后，按照规则支付。我把代码给A看后，表示无异议。我们就把代码放到一个区块链上去运行。这个叫做”智能合约账号“的账户，事实上是一个无人信托，它只会按照代码去执行。等比赛结果出来了，代码一执行，谁都赖不了账。A再信不过我，我再信不过A，我们都能实现对赌。 别的行业先不说，金融行业里实在太多这样的需求要这样做。比如私募基金协会出了个新八条，股票配资不让超过1：1了，赌场老油条们怎么办？吃惯优先利息的银行怎么办？于是大家想了一个利用信托的办法。劣后资金比如5000万，要搞个1:3的杠杆，然后银行出优先资金1.5个亿，双方都把钱打入信托账户。这时候信托账户上就有2个亿了，然后再拿信托的名义去券商开户做交易。 信托负责审核，如果产品的净值小于0.8了，那么平仓，银行本金和利息拿走，剩下的钱归劣后拿回去。如果净值很高，并且到期了，银行拿走本金和利息，剩下归劣后。信托是银行和劣后都认可的可信第三方，问题是这活不是白干的，信托要收管理费用的。 如今一块信托牌照大概能卖好几十亿，这钱太好挣了。整个流程耗时耗财不说，千三的通道费管理费忍了，最关键的问题，如果信托公司出问题了呢？信托公司可不是都做无风险业务的，天天嚷嚷着要打破刚兑啥的，如果哪一天真出问题了咋办。托管账户在银行这里，银行也不是没倒闭的风险。 要解决信任问题的办法恰恰是谁都不信。 咱们再写个智能合约净值=券商报告.get(产品名称)运行天数=DateTime.Now - 起始日期应计利息=优先资金量×日利息×运行天数银行应收=优先资金量+应计利息劣后应得=净值×总额-银行应收if(净值&lt;=0.8 or 运行天数&gt;=到期天数){pay 银行应收 to 银行pay 劣后应得 to 劣后}往区块链上那么一放，一样实现这个效果，但你不用担心任何一个第三方违约或者倒闭，因为这里并没有第三方。或者说全世界都是你的第三方。具体的底层技术细节不是码农兄弟就别管了，就跟你不需要知道链路层通讯协议照样能打王者荣耀一样。 好了，民间配资公司都可以洗洗睡了。标准优先劣后协议开源后，资金方自己可以打钱进智能合约，等劣后方打钱进去，填写个产品名称后就可以跑起来了。配资公司吃掉的利息差有多大，旧模式其实浪费的资源就有多大。比信托的通道费和管理费大多了。 撇开费用不谈，想想债券代持的萝卜章事件吧，不信任任何第三方是何等的重要。如果债券代持这笔业务是放在区块链上的话，那根本不可能有公章是伪造这种奇葩借口。因为区块链上的身份确认，是用高级加密算法的数字签名来实现的，不是地摊上私刻公章能做出来的。人类科技都发展到这水平了，还在用印章和笔迹来验证核实身份，这是何等奇怪之事。 说到中间人的浪费，莫过于保险公司了。保费里只有一小部分是真正发挥作用的，你的钱都付给brokers和宏观的核心CBD地段大楼去了。更别说各种模糊抠字眼的不理赔条款了。 我们再写个智能合约航班抵达时间=航空公司官网.get(航班号)pay 30 to Iif(航班抵达时间-预期时间&gt;3小时）pay 1000 to C这里I是保险公司，C是客户。I要先充1000到智能合约里，B要充30到智能合约。这是个标准合同，任何人充个1000都能当保险公司，试图去赚个30块钱。当然啦，保险公司靠大数定律赚钱，最好别只搞一次。智能合约在区块链上跑不是没有成本的，是要付费的，但远比传统大型金融中介机构要便宜得多得多。 成本还不是主要考量，最最关键的是，没有模糊条款。比起自然语言，代码没有歧义性。 如果保险公司和信托公司的违约风险大家没体会的话，想想场外期权的违约风险，行业是有血的教训的。比如现在大热的螺纹钢，没有期权不给力啊，搞个场外的话，但交易对手违约风险怎么办。 螺纹钢报价=上期所报价.get(“rb1801”)Pay 期权费 to Sellerif(DateTime.Now()&gt;=到期日 and 螺纹钢报价&gt;4000)内在价格=螺纹钢报价-4000pay 内在价值 to Buyer这和杠杆的保险有点像，这是一张执行价4000的螺纹钢的欧式看涨期权，期权的买方只需要充值期权费用进去就可以了。关键是期权的卖方，保证金充多少进去。到期了，如果期权的卖方保证金不足以支付了怎么办？ 我们有两种解决方案，一个是在智能合约里规定，一旦卖方的保证金不足以支付，直接强制平仓将保证金全部给多头。另外，智能合约是可以发送消息的，让卖方追加保证金进去，否则触发强平。这里的保证金不是给交易所的，而是打到智能合约的账户上的。 虽然是场外，但你也不用担心对手盘风险了。事实上，合约你可以自己定义规则，不一定要是标准的期权期货合约，衍生品人人可以设计，不用等交易所上市产品。A股股票融券难，不易做空？股价=上交所报价.get(“600516”)价差=股价-对赌价if(价差&gt;0)pay 价差 to Longelsepay Math.Abs(价差） to Short //Math.Abs 的意思是取绝对值多头（Long）和空头（Short）都充值保证金进去，然后开始对赌。保证金比例大家商量在合约里体现，也设计保证金Margin Call功能，这就是个股期货了。看好600516的可以获得没有配资利息的杠杆，空头可以不用融券做空。 所谓“现金交割”的金融期货，无非就是拿个指数对赌。沪深300啦，VIX期货啦，莫不如此。其实只要是有公允数据的东西，都可以拿来对赌，NBA比赛和飞机航班是否延误之外，还能有各种各样的公开数据，对冲掉你不想要的任何风险，只要你有交易对手。其实在区块链智能合约出现之前，金融行业里已经有个东西有点像智能合约。这东西叫信用证，是银行开具的。什么意思呢？大家都用过支付宝。在淘宝上卖家担心发货了买家不付款，买家担心付款了，卖家不发货。那怎么办？买家先打钱给支付宝，然后支付宝收到钱后告诉卖家买家已经付款，发货收货完成后买家确认收货，支付宝放款给卖家。支付宝是淘宝交易的可信第三方。 信用证是贸易过程中，银行充当可信第三方的角色。比如A公司要买B公司的货，是笔跨国贸易。A公司担心付钱给B公司货过不来，B公司担心发货了A迟迟不打款。于是，A公司给自己的银行打保证金让银行开具一张信用证给B的开户银行，信用证里写了只要海关数据显示货到了，我就会支付给你钱。如果条件迟迟不触发，那么银行会把保证金退还给客户。这里银行就是支付宝的角色。 问题是如果跨国贸易对手是一家名不见经传的小银行怎么办？信用不足怎么办？谁都别信谁的，大家用区块链技术做。根本不信任任何机构比任何机构要可信。如今，已经有大量的国际信用证开始使用区块链技术来做了。智能合约怎么写？相信大家已经有数了。供应链金融也是区块链技术应用得比较多的一个领域。放贷方要知道有没有真实上下游的交易，应收确权等等。谁都别信谁，上区块链，上下游把自己有没有发货有没有应付写上去。谁都别想赖账，明明白白的公开账本。放贷方就能做风险控制了。 上面说的主要是金融方面的应用，区块链技术能做的其他领域的应用还很多。比如房地产的确权工作，这比一纸地契要可靠，在一些法制程度比较差的地方在应用。还节约了房地产交易的费用，当然这不如打保证金去智能合约里那么牢靠。毕竟公开账本里明明白白就是你的地，地方军阀完全可以不认账。 投票系统也是大的应用场景，不用担心“被代表”了。因为区块链上所有的信息都是靠数字签名来验证你的身份的，并且信息的一致性有保证，所以利用区块链技术可以做到非常可信的投票体系。NasdQ交易所的区块链交易系统Linq就是个好例子，股票的股东在做投票的时候，谁有多少股谁就有多少个投票权，股东决议变得可信而高效。 区块链技术因为是跑在一个完全P2P的网络里的，完全不知道运行在网络里的哪里，拥有绝佳的保密性和安全性。所以有一个比较有意思的项目，利用这个做的保密通讯工具。每个人的身份通过数字签名技术验证，不需要根证书啥的。 一个不需要中心化网络的加密通信信道，简直可以再造一个升级版暗网。版权也是个大的应用领域，版权的交易可以去中心。这样的场景在各行各业还有很多，区块链技术的价值还等待大家去挖掘。值得一提的是，智能合约的设计是区块链这个技术本身就自带的。第一个版本的bitcoin就是跑一个脚本来解锁一个加密数字货币的。 链接：https://www.zhihu.com/question/27687960/answer/213830819来源：知乎","link":"/2021/06/16/a-qklyy/"},{"title":"区块链与智能财务","text":"一、区块链和财务的关系区块链是一种计算机技术在互联网时代的创新应用模式，是数据库、密码学、网络技术等多种技术整合集成的结果。其出现的原因在于互联网环境下货币的传输不得不依赖于中介系统如第三方交易平台，以实现价值转移。区块链在交易中的主要流程为：新交易创建——通过P2P网络传播——交易验证——验证结果通过P2P网络传播——交易写入账本，即从生成到在网络中传播，再到通过工作量证明、整个网络节点验证，最终记录到区块链。 由于区块链的“记账机制”与财务领域信息系统记账模式的高度契合，以及区块链去中心化的分布式账簿等特征，引起区块链技术在财务领域广泛的应用前景。区块链技术分布式思想在财务众包模式的应用上更具优势，可以解决互联网财务众包的信息安全性和可信任问题。区块链弱中心化、智能合约的区块链技术可以改变“互联网+财务”手续费高、耗时长、信息不透明等问题，降低了财务运作成本。 二、“互联网+”下财务活动面临的问题在“互联网+”、大数据背景下，财务管理依然是各行业企业进行筹融资获得现金流、形成企业资产从而提高市场占有率、降低经营风险、增强企业综合实力、实现企业价值最大化的重要活动。但“互联网+”下的财务管理出现了交易成本高、支付结算周期长、人机协同下的信任问题。 （一）会计信息难以确保真实可靠。“互联网+”背景下，财务管理是一项人机协同的活动。在人机协同完成财务工作的过程中，由于数据信息未被“标记”，无法保证原始交易数据信息在多方传递过程中的精确性。在财务活动中，原始的交易信息或者会计处理结果很容易被人为篡改和伪造，从而出现企业为虚增利润进行关联方交易，甚至伪造销售合同、篡改发票金额等隐蔽真实交易的行为，以增加收入、降低费用，严重影响了会计信息在确认、记录、计量、报告等一系列财务活动中的真实可靠。 （二）交易成本高。由于人的“有限理性”和“机会主义行为”，为确保交易达成，总会需要支付额外的费用。在财务管理的筹投资活动中，交易成本高，一方面原因在于中介机构（如银行等支付中介、托管、公证）等，中介机构使得资金间接地在交易双方中转移，在这个过程中，由于资金流转次数增加，交易费用相对于直接在交易双方中流转成本较高。另一方面，由于信息不对称，使得企业在进行财务管理活动中增加了信息查询、搜索等环节，发生诸如谈判成本、签约成本等费用。 三、区块链技术在财务领域的应用优势（一）分布式账簿，精确化财务信息。在区块链技术下，不同于传统的由单个中心进行财务信息的确认计量等财务过程的“集中式记账模式”，区块链的分布式账簿由全网参与者共同记账，共同公证，无中心，无权威，并在计算机设定。程序下及时对参与方输人的信息进行确认，最终形成全网没有重复记录的精确的信息数据库。以财务信息为基础生成的信息数据库在区块链中透明公开，形成了共享账本。共享账本可以改变传统财务复式记账法下会计信息的重复处理带来的财务管理漏洞，可有效减少传统“人机协同”模式下产生的交易双方对账、纠错成本，以及库存现金短缺、财务账簿等财会资料被销毁等问题。此外，分布式账簿分散了单个财务参与者的会计责任，避免了由于单个会计信息记录偏差引起的系列财务信息失真，保证了原始会计信息的精确性。 （二）哈希算法，固化财务信息。哈希算法是一种单向密码体制，信息在形成全网无重复记录的精确数据库后，计算机将其打包形成一个“区块”，加盖时间戳，数据写入时间被记录，整个区块被加入时间维度，再根据时间序列通过数据密码(哈希值)与上一个区块相连接。由于每一个区块的信息都是在全网参与者达成一-致共识后形成的真实信息，且哈希算法的加密过程是不可逆的，这就意味着任何参与者都不可能修改时间戳上的信息，因而相对于传统记账模式下的财务信息，区块链技术下的财务信息是一种被固化的财务交易信息，原则上不可篡改。历史财务信息的固化减少了原始财务信息在确认、记录、计量和报告环节被修改、删除、伪造的可能性，为企业参与市场交易活动提供了真实可靠的信息，有效解决了市场参与者由于利益倾向出现信息隐匿而导致的不平等利益侵占。 （三）去中心化，降低财务运作成本。在区块链技术下，全网参与者无需依赖于单个中心化的服务器进行交易，而是分布式的，通过网络节点来运行，实现点与点的直接交易，从而取代了交易双方或多方依托的第三方中介信任机构，避免了交易过程中出现的诸如信用、清算和信息泄露的管理风险。同时点对点的直接交易，可有效减少资金在多中间机构来回运转的交易费用，同时提高交易速度。 （四）智能合约，提高信息处理能力。智能合约是能够自动执行合约条款的计算机程序，是一套合约参与方以数字定义的协议。当满足预设的条件时，合约能自动执行相应的条款，无须人为干预。同时智能合约能够自动获取资源，即通过服务等获取资金，当需要时也会自主使用这些资金。合约参与方在交易过程中并不依赖于单个中心化的服务器，而是分布式的，通过网络节点来运行，从而在提升合约可信度的同时有效解决由于信任机制带来的高额的交易成本，基于电子数据完成的合约极大地简化了财务处理，提高了财务信息处理效率，有望在金融行业抵押贷款以及遗产分配中应用。区块链可以通过分布式账簿精确原始财务信息，利用哈希值固化信息，使得信息不可逆不可篡改，在去中心化和智能合约的条件下降低成本，提高信息处理能力，给“互联网+“下财务管理出现的新问题带来了新的解决方法。 区块链可以通过分布式账簿精确原始财务信息，利用哈希值固化信息，使得信息不可逆不可篡改，在去中心化和智能合约的条件下降低成本，提高信息处理能力，给“互联网+“下财务管理出现的新问题带来了新的解决方法。**作者：忘怯链接：https://zhuanlan.zhihu.com/p/339727421来源：知乎","link":"/2021/05/19/a-qklyzncw/"},{"title":"Raft算法","text":"材料整理自CSDN拜占庭的故事大概是这么说的：拜占庭帝国拥有巨大的财富，周围10个邻邦垂诞已久，但拜占庭高墙耸立，固若金汤，没有一个单独的邻邦能够成功入侵。任何单个邻邦入侵的都会失败，同时也有可能自身被其他9个邻邦入侵。拜占庭帝国防御能力如此之强，至少要有十个邻邦中的一半以上同时进攻，才有可能攻破。然而，如果其中的一个或者几个邻邦本身答应好一起进攻，但实际过程出现背叛，那么入侵者可能都会被歼灭。于是每一方都小心行事，不敢轻易相信邻国。这就是拜占庭将军问题。 在这个分布式网络里：每个将军都有一份实时与其他将军同步的消息账本。账本里有每个将军的签名都是可以验证身份的。如果有哪些消息不一致，可以知道消息不一致的是哪些将军。尽管有消息不一致的，只要超过半数同意进攻，少数服从多数，共识达成。 由此，在一个分布式的系统中，尽管有坏人，坏人可以做任意事情(不受protocol限制)，比如不响应、发送错误信息、对不同节点发送不同决定、不同错误节点联合起来干坏事等等。但是，只要大多数人是好人，就完全有可能去中心化地实现共识。 什么是 Raft 算法？Raft 算法是一种简单易懂的共识算法。它依靠 状态机 和 主从同步 的方式，在各个节点之间实现数据的一致性。 在学习Raft算法的时候，需要了解Raft的两个核心要点：1.选取主节点2.同步数据不难理解，使用主从同步的方式，可以让集群各个节点的数据更新以主节点为准，从而保证了一致性。那么，如何选取主节点呢？Raft算法在选择主节点的过程中，也是通过多个节点之间的投票竞争。说到这里，不得不说一下Raft算法的状态机。Raft算法为节点定义了三种角色： 1.Leader（主节点）2.Follower（从节点）3.Candidate（参与投票竞争的节点）让我们来看一看选主的具体流程：第一步，在最初，还没有一个主节点的时候，所有节点的身份都是Follower。每一个节点都有自己的计时器，当计时达到了超时时间（Election Timeout），该节点会转变为Candidate。第二步，成为Candidate的节点，会首先给自己投票，然后向集群中其他所有的节点发起请求，要求大家都给自己投票。第三步，其他收到投票请求且还未投票的Follower节点会向发起者投票，发起者收到反馈通知后，票数增加。第四步，当得票数超过了集群节点数量的一半，该节点晋升为Leader节点。Leader节点会立刻向其他节点发出通知，告诉大家自己才是老大。收到通知的节点全部变为Follower，并且各自的计时器清零。这里需要说明一点，每个节点的超时时间都是不一样的。比如A节点的超时时间是3秒，B节点的超时时间是5秒，C节点的超时时间是4秒。这样一来，A节点将会最先发起投票请求，而不是所有节点同时发起。为什么这样设计呢？设想如果所有节点同时发起投票，必然会导致大家的票数差不多，形成僵局，谁也当不成老大。那么，成为Leader的节点是否就坐稳了老大的位置呢？并不是。Leader节点需要每隔一段时间向集群其他节点发送心跳通知，表明你们的老大还活着。一旦Leader节点挂掉，发不出通知，那么计时达到了超时时间的Follower节点会转变为Candidate节点，发起选主投票，周而复始……让我们来看一看数据同步的流程：第一步，由客户端提交数据到Leader节点。第二步，由Leader节点把数据复制到集群内所有的Follower节点。如果一次复制失败，会不断进行重试。第三步，Follower节点们接收到复制的数据，会反馈给Leader节点。第四步，如果Leader节点接收到超过半数的Follower反馈，表明复制成功。于是提交自己的数据，并通知客户端数据提交成功。第五步，由Leader节点通知集群内所有的Follower节点提交数据，从而完成数据同步流程。","link":"/2021/05/19/a-raftsf/"},{"title":"网站简介","text":"欢迎来到唔西迪西的区块链学习网~网站主要分享区块链和财务相关的文章、视频和小工具右侧栏可以从 文章 视频 小工具 三个分类中快速找到想要的内容左侧栏有 最近文章别忘了 打赏 和 关注 ！","link":"/2021/06/16/introduction/"},{"title":"什么是区块链","text":"整理自知乎，本文将幽默的介绍区块链 区块链的定义区块链本质上是一个去中心化的分布式账本数据库，其本身是一串使用密码学相关联所产生的数据块，每一个数据块中包含了多次比特币网络交易有效确认的信息。 这是区块链的定义，因此要逐步了解区块链，我们需要一步步了解如下东西。 去中心化先来考虑一个中心化集中式处理的过程。你要在某宝上买一部手机，交易流程是：你将钱打给支付宝－支付宝收款后通知卖家发货－卖家发货－你确认收货－支付宝把钱打给卖家。在这个过程中，虽然你是在和卖家交易，但是这笔交易还牵扯到了除了你和卖家的第三方，即支付宝，你和卖家的交易都是围绕支付宝展开。因此，如果支付宝系统出了问题便会造成这笔交易的失败。并且虽然你只是简单的买了一个手机，但是你和卖家都要向第三方提供多余的信息。因此考虑极端情况，如果支付宝跑路了或者是拿了钱不却不承认你的交易或者是支付宝所在的城市因为开G20把所有人都赶走了(?)，那么你就悲剧了。而去中心化的处理方式就要显得简单很多，你只需要和卖家交换钱和手机，然后双方都声称完成了这笔交易，就OK了。可以看出在某些特定情况下，去中心化的处理方式会更便捷，同时也无须担心自己的与交易无关的信息泄漏。其实如果只考虑两个人的交易并不能把去中心化的好处完全展示出来，设想如果有成千上万笔交易在进行，去中心化的处理方式会节约很多资源，使得整个交易自主化、简单化，并且排除了被中心化代理控制的风险。去中心化是区块链技术的颠覆性特点，它无需中心化代理，实现了一种点对点的直接交互，使得高效率、大规模、无中心化代理的信息交互方式成为了现实。当然，上述的例子有一个很大的潜在问题：没有了权威的中心化代理，怎样保证每笔交易的准确性和有效性呢？比如：如果没有了权威的中心化代理，张三某一天借了我100块钱，但是不还钱还不承认怎么办？这里就引出了区块链的其它特性。 两个基础难题在去中心化以后，整个系统中没有了权威的中心化代理，信息的可信度和准确性便会面临问题。 问题一：类两军问题类两军问题大致说的是有两个相距很远的军队要传递信息，红军派遣一个信使去跟蓝军说：“你他娘的把意大利炮拿出来！”。蓝军收到信息后又派了一个信使去红军说：“收到指令！”。然后红军又派一个信使去蓝军说：“知道你收到指令了！”。然后蓝军又派一个信使去红军说：“知道你知道我收到指令了！”。然后红军又派一个信使去蓝军说：“知道你知道我知道你收到指令了！”……然后就没完没了了。在这种情况下，因为是点对点的通信，双方不可能在这种情况下达到信息的一致性。严谨一点，就是“在分布式计算上，试图在异步系统和不可靠的通道上达到一致性是不可能的”。 问题二：拜占庭将军问题拜占庭罗马帝国在军事行动中，采取将军投票的策略来决定是进攻还是撤退，也就是说如果多数人决定进攻，就上去干。但是军队中如果有奸细（比如将军已经反水故意乱投票，或者传令官叛变擅自修改军令），那怎么保证最后投票的结果真正反映了忠诚的将军的意愿呢？拜占庭将军问题反映到信息交换领域中来，可以理解为在一个去中心的系统中，有一些节点是坏掉的，它们可能向外界广播错误的信息或者不广播信息，在这种情况下如何验证数据传输的准确性。 区块链技术的诞生我们先来建立一个去中心化的系统，为了方便理解，我们来看一个简单的去中心化借贷模型：如果A借了B 100块钱，这个时候，A在人群中大喊“我是A，我借给了B 100块钱！”，B也在人群中大喊“我是B，A借给了我100块钱！”，此时路人甲乙丙丁都听到了这些消息，因此所有人都在心中默默记下了“A借给了B100块钱”。你看，这个时候一个去中心化的系统就建立起来了，这个系统中不需要银行，也不需要借贷协议和收据，严格来说，甚至不需要人与人长久的信任关系（比如B突然又改口说“我不欠A钱！”，这个时候人民群众就会站出来说“不对，我的小本本上记录了你某天借了A100块钱！”）。可能你已经发现了，在上述的模型中，所谓的“100块钱”已经不重要了。换句话说，任何东西都可以在这个模型中交换，甚至你可以凭空杜撰一个东西，只要大家承认，你就可以让你杜撰的东西流通。比如：我在人群中高喊一声“我创造了10个查克拉！”，我甚至不需要知道查克拉是什么，也不需要关心世界上是不是真的有查克拉，只要大家都听到，然后在自己的小本本上记下“LaiW3n有10个查克拉”，于是我就真的有100个查克拉了。从此以后，我便可以声称我给了某人1个查克拉，只要路人甲乙丙丁都收到并且承认了这一信息，那我就算完成了这次交易，哪怕世界上没有查克拉。假设过了很长一段时间，我凭空创造的查克拉已经在这个系统中流通了起来，大家都开始认可了查克拉。但是这个系统中一共就只有10个查克拉，于是有人动了坏心思，他在人群中高呼“我有10个查克拉！”怎么办？大家是直接在本本上记下他有10个查克拉么，这样不是人人都可以伪造查克拉了么？为了防止这种现象发生，我决定在我创造查克拉的时候给我的查克拉打上标记（更准确地说，我是给我喊的那句“我创造了10个查克拉”打上标记，比如标记为001），这样以后在每一笔交易的时候，我在高喊“我给了某某1个查克拉！”的时候，会附加上额外的一句话：“这1个查克拉的来源是记为001的那条记录，我的这句话标记为002！”。我们再抽象一点，某人喊话的内容的格式就变成了：“这句话编号xxx，上一句话的编号是yyy，我给了某某1个查克拉！”，这样就解决了伪造的问题。其实上述模型就变成一个简化的中本聪第一版比特币区块链协议：好了，看到这里你基本已经能够生动形象又不涉及任何细节地向你的弱智室友解释区块链了。但是也许你的室友是一个有打破沙锅问到底精神求是学子，因此你最好继续准好回答以下这几个问题。 1.凭啥？你室友可能会问：“凭啥你喊一句话我就帮你记？我的小本本不要钱么？”。为了激励大家帮我传话和记账，我决定给第一个听到我喊话并且记录在小本本上的人一些奖励：第一个听到我喊话并记录下来的人，你就凭空得到了1个查克拉，这个查克拉是整个系统对你幸苦记账的报酬，而你记录了这句话之后，要马上告诉其它人你已经记录好了，让别人放弃继续记录这句话，并给你自己的记录编号让别人有据可查，然后你再把我的话加上你的记录编号一起喊出来，供下一个人记账。当这个规则定下以后，这个系统中一定会出现一批人，他们开始竖着耳朵监听周围发出的声音，以抢占第一个记账的权利。 2.听谁的？在这个系统中，如果我和另一个人C几乎同时地喊出一句：“为了艾泽拉斯！”。由于听众所处的位置不同，一定会有人先听到我说的那句话，而另外一些人则先听到C的那句话，如果我们规定只能有一个人说出这句话，那到底这句话是谁说的？如果不加任何条件，那么上述的情况一定会这样发展：一部分人认为这句话是我说的，在听到这句话之后开始记账，之后他们所做的所有事情都是基于这个事实，并且随着这个信息一次次的传下去，这条信息链会越来越深；而另外一群认为是C先说这句话的人，也会按照这样的趋势发展。这样，原本是一条唯一的信息链，在我们喊出“为了艾泽拉斯”这句话之后，分叉了！？这会导致怎样的情况呢？按照我们的设想，应该每个人的小本本上记录的东西都是一样的，都是一条可以把所有信息串联起来的链条。但是在这一刻，他们小本本上记录的东西不一样了！这还玩毛啊？以后还怎么确定交易和信息的真实性！？为了解决这个问题，我又追加了新的规则：每个人在记录小本本的时候，需要脱鞋然后用脚拿笔，在小本本上用正楷体书写！有了这个规定，由于用脚写字难度很大，每个人至少需要10分钟才能写完，而且由于每个人用脚写字的熟练度不通，写完这句话所用的时间也不同，因此一定会有人先写完然后高呼“我写完了！那句话是LaiW3n喊的！”，这样其它正在写这句话的人便会停笔，然后在小本本上重新开始写“那句话是来文写的，上一句的编号是xxx”。 3.双花问题这个时候你的室友可能又要问：如果我同时宣布我给了A一个查克拉和我给了B一个查克拉，但是我只有一个查克拉，那咋整？是A和B都收到了查克拉还是咋地？这个时候你只需要托起他的下巴，温柔地看着他的眼睛，用手刮刮他的鼻子，说：“小妖精，你把这种情况带到上面的规则中去试试？” 作者：汪乐-LaiW3n链接：https://www.zhihu.com/question/37290469/answer/107612456来源：知乎","link":"/2021/05/19/a-smsqkl/"},{"title":"blockchain-workbench开源项目","text":"blockchain-workbenchblockchain-workbench是github上的一个开源项目，可以获得样例和源码。官网：https://github.com/Azure-Samples/blockchain （国外，需魔法上网）","link":"/2021/06/16/t-blockchain-workbench/"},{"title":"hyperledger开源项目","text":"hyperledger这是一个关于区块链hyperledger的开源项目，在上面可以找到相关课程官网：https://github.com/itheima1/BlockChain （国外，需魔法上网）","link":"/2021/06/16/t-hyperledger/"},{"title":"MetaMask工具","text":"MetaMaskMetaMask是一个浏览器扩展，可以让你用普通的浏览器访问以太坊区块链。官网：https://metamask.io/ （国外，需魔法上网）","link":"/2021/05/26/t-metamask/"},{"title":"区块链到底是什么","text":"","link":"/2021/05/19/v-qklsm/"},{"title":"Remix工具","text":"RemixRemix是以太坊官方开发的Solidity在线集成开发环境，你可以直接在浏览器中编写Solidity代码、编译、 调试以及部署合约。官网：http://remix.hubwiz.com/","link":"/2021/05/26/t-remix/"},{"title":"Mist工具","text":"MistMist浏览器是以太坊官方浏览器，内置访问以太坊区块链的能力。官网：https://github.com/ethereum/mist （国外，需魔法上网）","link":"/2021/05/26/t-mist/"},{"title":"六分钟讲明区块链","text":"","link":"/2021/05/19/v-6min/"},{"title":"《区块链技术与应用》公开课","text":"","link":"/2021/06/16/v-gkk/"},{"title":"区块链和比特币原理","text":"","link":"/2021/06/16/v-lyl/"},{"title":"区块链与各行业","text":"","link":"/2021/06/16/v-qklyhy/"}],"tags":[{"name":"区块链相关算法","slug":"区块链相关算法","link":"/tags/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/"},{"name":"区块链学习","slug":"区块链学习","link":"/tags/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0/"},{"name":"区块链与智能财务相关","slug":"区块链与智能财务相关","link":"/tags/%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%8E%E6%99%BA%E8%83%BD%E8%B4%A2%E5%8A%A1%E7%9B%B8%E5%85%B3/"},{"name":"网页简介","slug":"网页简介","link":"/tags/%E7%BD%91%E9%A1%B5%E7%AE%80%E4%BB%8B/"},{"name":"区块链小工具","slug":"区块链小工具","link":"/tags/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"name":"区块链介绍","slug":"区块链介绍","link":"/tags/%E5%8C%BA%E5%9D%97%E9%93%BE%E4%BB%8B%E7%BB%8D/"},{"name":"区块链前景","slug":"区块链前景","link":"/tags/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%89%8D%E6%99%AF/"}],"categories":[{"name":"文章","slug":"文章","link":"/categories/%E6%96%87%E7%AB%A0/"},{"name":"小工具","slug":"小工具","link":"/categories/%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"name":"视频","slug":"视频","link":"/categories/%E8%A7%86%E9%A2%91/"}]}